// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: quant-mocktrander.proto

package pub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BuyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Code  string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Num   int64  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"` //-1：现价买入；>0:挂单；
}

func (x *BuyReq) Reset() {
	*x = BuyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quant_mocktrander_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyReq) ProtoMessage() {}

func (x *BuyReq) ProtoReflect() protoreflect.Message {
	mi := &file_quant_mocktrander_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyReq.ProtoReflect.Descriptor instead.
func (*BuyReq) Descriptor() ([]byte, []int) {
	return file_quant_mocktrander_proto_rawDescGZIP(), []int{0}
}

func (x *BuyReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *BuyReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BuyReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BuyReq) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *BuyReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type BuyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Num   int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *BuyRes) Reset() {
	*x = BuyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quant_mocktrander_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyRes) ProtoMessage() {}

func (x *BuyRes) ProtoReflect() protoreflect.Message {
	mi := &file_quant_mocktrander_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyRes.ProtoReflect.Descriptor instead.
func (*BuyRes) Descriptor() ([]byte, []int) {
	return file_quant_mocktrander_proto_rawDescGZIP(), []int{1}
}

func (x *BuyRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BuyRes) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type SellReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid   int64  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Code  string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Num   int64  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Price int64  `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"` //-1：现价买入；>0:挂单；
}

func (x *SellReq) Reset() {
	*x = SellReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quant_mocktrander_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellReq) ProtoMessage() {}

func (x *SellReq) ProtoReflect() protoreflect.Message {
	mi := &file_quant_mocktrander_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellReq.ProtoReflect.Descriptor instead.
func (*SellReq) Descriptor() ([]byte, []int) {
	return file_quant_mocktrander_proto_rawDescGZIP(), []int{2}
}

func (x *SellReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SellReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SellReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SellReq) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *SellReq) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type SellRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Num   int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *SellRes) Reset() {
	*x = SellRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quant_mocktrander_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellRes) ProtoMessage() {}

func (x *SellRes) ProtoReflect() protoreflect.Message {
	mi := &file_quant_mocktrander_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellRes.ProtoReflect.Descriptor instead.
func (*SellRes) Descriptor() ([]byte, []int) {
	return file_quant_mocktrander_proto_rawDescGZIP(), []int{3}
}

func (x *SellRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SellRes) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type QueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *QueryReq) Reset() {
	*x = QueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quant_mocktrander_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReq) ProtoMessage() {}

func (x *QueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_quant_mocktrander_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReq.ProtoReflect.Descriptor instead.
func (*QueryReq) Descriptor() ([]byte, []int) {
	return file_quant_mocktrander_proto_rawDescGZIP(), []int{4}
}

func (x *QueryReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type QueryRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*AssetData `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *QueryRes) Reset() {
	*x = QueryRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quant_mocktrander_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRes) ProtoMessage() {}

func (x *QueryRes) ProtoReflect() protoreflect.Message {
	mi := &file_quant_mocktrander_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRes.ProtoReflect.Descriptor instead.
func (*QueryRes) Descriptor() ([]byte, []int) {
	return file_quant_mocktrander_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRes) GetAssets() []*AssetData {
	if x != nil {
		return x.Assets
	}
	return nil
}

type AssetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 资产类型 -1人民币 -2港币 -3美元 1上证 2深证 3美股(包括道琼斯和纳斯达克) 4港股
	Type int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Num  int64  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *AssetData) Reset() {
	*x = AssetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quant_mocktrander_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetData) ProtoMessage() {}

func (x *AssetData) ProtoReflect() protoreflect.Message {
	mi := &file_quant_mocktrander_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetData.ProtoReflect.Descriptor instead.
func (*AssetData) Descriptor() ([]byte, []int) {
	return file_quant_mocktrander_proto_rawDescGZIP(), []int{6}
}

func (x *AssetData) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AssetData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AssetData) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

var File_quant_mocktrander_proto protoreflect.FileDescriptor

var file_quant_mocktrander_proto_rawDesc = []byte{
	0x0a, 0x17, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x70, 0x75, 0x62, 0x22, 0x6a,
	0x0a, 0x06, 0x42, 0x75, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x42, 0x75,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x6b, 0x0a, 0x07,
	0x53, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x31, 0x0a, 0x07, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x1c, 0x0a, 0x08,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x08, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x45,
	0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x32, 0x85, 0x01, 0x0a, 0x11, 0x6d, 0x6f, 0x63, 0x6b, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x42,
	0x75, 0x79, 0x12, 0x0b, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x0b, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x42, 0x75, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x24,
	0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x0c, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0d, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x31, 0x5a,
	0x2f, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x77, 0x65, 0x69, 0x77, 0x65, 0x6e, 0x63, 0x68,
	0x6f, 0x6e, 0x67, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x2d, 0x6d, 0x6f, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quant_mocktrander_proto_rawDescOnce sync.Once
	file_quant_mocktrander_proto_rawDescData = file_quant_mocktrander_proto_rawDesc
)

func file_quant_mocktrander_proto_rawDescGZIP() []byte {
	file_quant_mocktrander_proto_rawDescOnce.Do(func() {
		file_quant_mocktrander_proto_rawDescData = protoimpl.X.CompressGZIP(file_quant_mocktrander_proto_rawDescData)
	})
	return file_quant_mocktrander_proto_rawDescData
}

var file_quant_mocktrander_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_quant_mocktrander_proto_goTypes = []interface{}{
	(*BuyReq)(nil),    // 0: pub.BuyReq
	(*BuyRes)(nil),    // 1: pub.BuyRes
	(*SellReq)(nil),   // 2: pub.SellReq
	(*SellRes)(nil),   // 3: pub.SellRes
	(*QueryReq)(nil),  // 4: pub.QueryReq
	(*QueryRes)(nil),  // 5: pub.QueryRes
	(*AssetData)(nil), // 6: pub.AssetData
}
var file_quant_mocktrander_proto_depIdxs = []int32{
	6, // 0: pub.QueryRes.assets:type_name -> pub.AssetData
	0, // 1: pub.mocktraderService.Buy:input_type -> pub.BuyReq
	2, // 2: pub.mocktraderService.Sell:input_type -> pub.SellReq
	4, // 3: pub.mocktraderService.Query:input_type -> pub.QueryReq
	1, // 4: pub.mocktraderService.Buy:output_type -> pub.BuyRes
	3, // 5: pub.mocktraderService.Sell:output_type -> pub.SellRes
	5, // 6: pub.mocktraderService.Query:output_type -> pub.QueryRes
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_quant_mocktrander_proto_init() }
func file_quant_mocktrander_proto_init() {
	if File_quant_mocktrander_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quant_mocktrander_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quant_mocktrander_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quant_mocktrander_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quant_mocktrander_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quant_mocktrander_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quant_mocktrander_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quant_mocktrander_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quant_mocktrander_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quant_mocktrander_proto_goTypes,
		DependencyIndexes: file_quant_mocktrander_proto_depIdxs,
		MessageInfos:      file_quant_mocktrander_proto_msgTypes,
	}.Build()
	File_quant_mocktrander_proto = out.File
	file_quant_mocktrander_proto_rawDesc = nil
	file_quant_mocktrander_proto_goTypes = nil
	file_quant_mocktrander_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MocktraderServiceClient is the client API for MocktraderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MocktraderServiceClient interface {
	Buy(ctx context.Context, in *BuyReq, opts ...grpc.CallOption) (*BuyRes, error)
	Sell(ctx context.Context, in *SellReq, opts ...grpc.CallOption) (*SellRes, error)
	Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRes, error)
}

type mocktraderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMocktraderServiceClient(cc grpc.ClientConnInterface) MocktraderServiceClient {
	return &mocktraderServiceClient{cc}
}

func (c *mocktraderServiceClient) Buy(ctx context.Context, in *BuyReq, opts ...grpc.CallOption) (*BuyRes, error) {
	out := new(BuyRes)
	err := c.cc.Invoke(ctx, "/pub.mocktraderService/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mocktraderServiceClient) Sell(ctx context.Context, in *SellReq, opts ...grpc.CallOption) (*SellRes, error) {
	out := new(SellRes)
	err := c.cc.Invoke(ctx, "/pub.mocktraderService/Sell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mocktraderServiceClient) Query(ctx context.Context, in *QueryReq, opts ...grpc.CallOption) (*QueryRes, error) {
	out := new(QueryRes)
	err := c.cc.Invoke(ctx, "/pub.mocktraderService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MocktraderServiceServer is the server API for MocktraderService service.
type MocktraderServiceServer interface {
	Buy(context.Context, *BuyReq) (*BuyRes, error)
	Sell(context.Context, *SellReq) (*SellRes, error)
	Query(context.Context, *QueryReq) (*QueryRes, error)
}

// UnimplementedMocktraderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMocktraderServiceServer struct {
}

func (*UnimplementedMocktraderServiceServer) Buy(context.Context, *BuyReq) (*BuyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (*UnimplementedMocktraderServiceServer) Sell(context.Context, *SellReq) (*SellRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sell not implemented")
}
func (*UnimplementedMocktraderServiceServer) Query(context.Context, *QueryReq) (*QueryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterMocktraderServiceServer(s *grpc.Server, srv MocktraderServiceServer) {
	s.RegisterService(&_MocktraderService_serviceDesc, srv)
}

func _MocktraderService_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MocktraderServiceServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.mocktraderService/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MocktraderServiceServer).Buy(ctx, req.(*BuyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MocktraderService_Sell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MocktraderServiceServer).Sell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.mocktraderService/Sell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MocktraderServiceServer).Sell(ctx, req.(*SellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MocktraderService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MocktraderServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub.mocktraderService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MocktraderServiceServer).Query(ctx, req.(*QueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MocktraderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pub.mocktraderService",
	HandlerType: (*MocktraderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Buy",
			Handler:    _MocktraderService_Buy_Handler,
		},
		{
			MethodName: "Sell",
			Handler:    _MocktraderService_Sell_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _MocktraderService_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quant-mocktrander.proto",
}
